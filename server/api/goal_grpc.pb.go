// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoalClient is the client API for Goal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoalClient interface {
	CreateGoal(ctx context.Context, in *CreateGoalRequest, opts ...grpc.CallOption) (*CreateGoalResponse, error)
	GetGoals(ctx context.Context, in *GetGoalsRequest, opts ...grpc.CallOption) (*GetGoalsResponse, error)
}

type goalClient struct {
	cc grpc.ClientConnInterface
}

func NewGoalClient(cc grpc.ClientConnInterface) GoalClient {
	return &goalClient{cc}
}

func (c *goalClient) CreateGoal(ctx context.Context, in *CreateGoalRequest, opts ...grpc.CallOption) (*CreateGoalResponse, error) {
	out := new(CreateGoalResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Goal/CreateGoal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goalClient) GetGoals(ctx context.Context, in *GetGoalsRequest, opts ...grpc.CallOption) (*GetGoalsResponse, error) {
	out := new(GetGoalsResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Goal/GetGoals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoalServer is the server API for Goal service.
// All implementations must embed UnimplementedGoalServer
// for forward compatibility
type GoalServer interface {
	CreateGoal(context.Context, *CreateGoalRequest) (*CreateGoalResponse, error)
	GetGoals(context.Context, *GetGoalsRequest) (*GetGoalsResponse, error)
	mustEmbedUnimplementedGoalServer()
}

// UnimplementedGoalServer must be embedded to have forward compatible implementations.
type UnimplementedGoalServer struct {
}

func (UnimplementedGoalServer) CreateGoal(context.Context, *CreateGoalRequest) (*CreateGoalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoal not implemented")
}
func (UnimplementedGoalServer) GetGoals(context.Context, *GetGoalsRequest) (*GetGoalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoals not implemented")
}
func (UnimplementedGoalServer) mustEmbedUnimplementedGoalServer() {}

// UnsafeGoalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoalServer will
// result in compilation errors.
type UnsafeGoalServer interface {
	mustEmbedUnimplementedGoalServer()
}

func RegisterGoalServer(s grpc.ServiceRegistrar, srv GoalServer) {
	s.RegisterService(&Goal_ServiceDesc, srv)
}

func _Goal_CreateGoal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServer).CreateGoal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Goal/CreateGoal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServer).CreateGoal(ctx, req.(*CreateGoalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goal_GetGoals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoalServer).GetGoals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Goal/GetGoals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoalServer).GetGoals(ctx, req.(*GetGoalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Goal_ServiceDesc is the grpc.ServiceDesc for Goal service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goal_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookowl.Goal",
	HandlerType: (*GoalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGoal",
			Handler:    _Goal_CreateGoal_Handler,
		},
		{
			MethodName: "GetGoals",
			Handler:    _Goal_GetGoals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goal.proto",
}
