// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReadEventClient is the client API for ReadEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadEventClient interface {
	CreateReadEvent(ctx context.Context, in *CreateReadEventRequest, opts ...grpc.CallOption) (*CreateReadEventResponse, error)
	GetReadEventsByBookID(ctx context.Context, in *GetReadEventsByBookIDRequest, opts ...grpc.CallOption) (*GetReadEventsResponse, error)
}

type readEventClient struct {
	cc grpc.ClientConnInterface
}

func NewReadEventClient(cc grpc.ClientConnInterface) ReadEventClient {
	return &readEventClient{cc}
}

func (c *readEventClient) CreateReadEvent(ctx context.Context, in *CreateReadEventRequest, opts ...grpc.CallOption) (*CreateReadEventResponse, error) {
	out := new(CreateReadEventResponse)
	err := c.cc.Invoke(ctx, "/bookowl.ReadEvent/CreateReadEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readEventClient) GetReadEventsByBookID(ctx context.Context, in *GetReadEventsByBookIDRequest, opts ...grpc.CallOption) (*GetReadEventsResponse, error) {
	out := new(GetReadEventsResponse)
	err := c.cc.Invoke(ctx, "/bookowl.ReadEvent/GetReadEventsByBookID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadEventServer is the server API for ReadEvent service.
// All implementations must embed UnimplementedReadEventServer
// for forward compatibility
type ReadEventServer interface {
	CreateReadEvent(context.Context, *CreateReadEventRequest) (*CreateReadEventResponse, error)
	GetReadEventsByBookID(context.Context, *GetReadEventsByBookIDRequest) (*GetReadEventsResponse, error)
	mustEmbedUnimplementedReadEventServer()
}

// UnimplementedReadEventServer must be embedded to have forward compatible implementations.
type UnimplementedReadEventServer struct {
}

func (UnimplementedReadEventServer) CreateReadEvent(context.Context, *CreateReadEventRequest) (*CreateReadEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReadEvent not implemented")
}
func (UnimplementedReadEventServer) GetReadEventsByBookID(context.Context, *GetReadEventsByBookIDRequest) (*GetReadEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadEventsByBookID not implemented")
}
func (UnimplementedReadEventServer) mustEmbedUnimplementedReadEventServer() {}

// UnsafeReadEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadEventServer will
// result in compilation errors.
type UnsafeReadEventServer interface {
	mustEmbedUnimplementedReadEventServer()
}

func RegisterReadEventServer(s grpc.ServiceRegistrar, srv ReadEventServer) {
	s.RegisterService(&ReadEvent_ServiceDesc, srv)
}

func _ReadEvent_CreateReadEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReadEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadEventServer).CreateReadEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.ReadEvent/CreateReadEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadEventServer).CreateReadEvent(ctx, req.(*CreateReadEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReadEvent_GetReadEventsByBookID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadEventsByBookIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadEventServer).GetReadEventsByBookID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.ReadEvent/GetReadEventsByBookID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadEventServer).GetReadEventsByBookID(ctx, req.(*GetReadEventsByBookIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReadEvent_ServiceDesc is the grpc.ServiceDesc for ReadEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReadEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookowl.ReadEvent",
	HandlerType: (*ReadEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReadEvent",
			Handler:    _ReadEvent_CreateReadEvent_Handler,
		},
		{
			MethodName: "GetReadEventsByBookID",
			Handler:    _ReadEvent_GetReadEventsByBookID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "read_event.proto",
}
