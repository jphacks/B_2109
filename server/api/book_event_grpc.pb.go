// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookEventClient is the client API for BookEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookEventClient interface {
	// Registering BookEvent with bookmark ID
	Register(ctx context.Context, in *BookEventRegisterRequest, opts ...grpc.CallOption) (*BookEventRegisterResponse, error)
}

type bookEventClient struct {
	cc grpc.ClientConnInterface
}

func NewBookEventClient(cc grpc.ClientConnInterface) BookEventClient {
	return &bookEventClient{cc}
}

func (c *bookEventClient) Register(ctx context.Context, in *BookEventRegisterRequest, opts ...grpc.CallOption) (*BookEventRegisterResponse, error) {
	out := new(BookEventRegisterResponse)
	err := c.cc.Invoke(ctx, "/bookowl.BookEvent/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookEventServer is the server API for BookEvent service.
// All implementations must embed UnimplementedBookEventServer
// for forward compatibility
type BookEventServer interface {
	// Registering BookEvent with bookmark ID
	Register(context.Context, *BookEventRegisterRequest) (*BookEventRegisterResponse, error)
	mustEmbedUnimplementedBookEventServer()
}

// UnimplementedBookEventServer must be embedded to have forward compatible implementations.
type UnimplementedBookEventServer struct {
}

func (UnimplementedBookEventServer) Register(context.Context, *BookEventRegisterRequest) (*BookEventRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedBookEventServer) mustEmbedUnimplementedBookEventServer() {}

// UnsafeBookEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookEventServer will
// result in compilation errors.
type UnsafeBookEventServer interface {
	mustEmbedUnimplementedBookEventServer()
}

func RegisterBookEventServer(s grpc.ServiceRegistrar, srv BookEventServer) {
	s.RegisterService(&BookEvent_ServiceDesc, srv)
}

func _BookEvent_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookEventRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookEventServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.BookEvent/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookEventServer).Register(ctx, req.(*BookEventRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookEvent_ServiceDesc is the grpc.ServiceDesc for BookEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookowl.BookEvent",
	HandlerType: (*BookEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _BookEvent_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book_event.proto",
}
