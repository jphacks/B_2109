// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookClient is the client API for Book service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookClient interface {
	RegisterBook(ctx context.Context, in *RegisterBookRequest, opts ...grpc.CallOption) (*RegisterBookResponse, error)
	UpdateBookmarkID(ctx context.Context, in *UpdateBookmarkIDRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error)
	UpdateReadStatus(ctx context.Context, in *UpdateReadStatusRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error)
	GetBooks(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error)
	GetReadPercentage(ctx context.Context, in *GetReadPercentageRequest, opts ...grpc.CallOption) (*GetReadPercentageResponse, error)
	GetReadPages(ctx context.Context, in *GetReadPagesRequest, opts ...grpc.CallOption) (*GetReadPagesResponse, error)
	GetReadPagesWithDuration(ctx context.Context, in *GetReadPagesWithDurationRequest, opts ...grpc.CallOption) (*GetReadPagesResponse, error)
	GetReadPagesByBookID(ctx context.Context, in *GetReadPagesByBookIDRequest, opts ...grpc.CallOption) (*GetReadPagesResponse, error)
	GetBookmarkStatus(ctx context.Context, in *GetBookmarkStatusRequest, opts ...grpc.CallOption) (*GetBookmarkStatusResponse, error)
}

type bookClient struct {
	cc grpc.ClientConnInterface
}

func NewBookClient(cc grpc.ClientConnInterface) BookClient {
	return &bookClient{cc}
}

func (c *bookClient) RegisterBook(ctx context.Context, in *RegisterBookRequest, opts ...grpc.CallOption) (*RegisterBookResponse, error) {
	out := new(RegisterBookResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Book/RegisterBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) UpdateBookmarkID(ctx context.Context, in *UpdateBookmarkIDRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error) {
	out := new(UpdateBookResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Book/UpdateBookmarkID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) UpdateReadStatus(ctx context.Context, in *UpdateReadStatusRequest, opts ...grpc.CallOption) (*UpdateBookResponse, error) {
	out := new(UpdateBookResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Book/UpdateReadStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetBooks(ctx context.Context, in *GetBooksRequest, opts ...grpc.CallOption) (*GetBooksResponse, error) {
	out := new(GetBooksResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Book/GetBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetReadPercentage(ctx context.Context, in *GetReadPercentageRequest, opts ...grpc.CallOption) (*GetReadPercentageResponse, error) {
	out := new(GetReadPercentageResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Book/GetReadPercentage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetReadPages(ctx context.Context, in *GetReadPagesRequest, opts ...grpc.CallOption) (*GetReadPagesResponse, error) {
	out := new(GetReadPagesResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Book/GetReadPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetReadPagesWithDuration(ctx context.Context, in *GetReadPagesWithDurationRequest, opts ...grpc.CallOption) (*GetReadPagesResponse, error) {
	out := new(GetReadPagesResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Book/GetReadPagesWithDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetReadPagesByBookID(ctx context.Context, in *GetReadPagesByBookIDRequest, opts ...grpc.CallOption) (*GetReadPagesResponse, error) {
	out := new(GetReadPagesResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Book/GetReadPagesByBookID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookClient) GetBookmarkStatus(ctx context.Context, in *GetBookmarkStatusRequest, opts ...grpc.CallOption) (*GetBookmarkStatusResponse, error) {
	out := new(GetBookmarkStatusResponse)
	err := c.cc.Invoke(ctx, "/bookowl.Book/GetBookmarkStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServer is the server API for Book service.
// All implementations must embed UnimplementedBookServer
// for forward compatibility
type BookServer interface {
	RegisterBook(context.Context, *RegisterBookRequest) (*RegisterBookResponse, error)
	UpdateBookmarkID(context.Context, *UpdateBookmarkIDRequest) (*UpdateBookResponse, error)
	UpdateReadStatus(context.Context, *UpdateReadStatusRequest) (*UpdateBookResponse, error)
	GetBooks(context.Context, *GetBooksRequest) (*GetBooksResponse, error)
	GetReadPercentage(context.Context, *GetReadPercentageRequest) (*GetReadPercentageResponse, error)
	GetReadPages(context.Context, *GetReadPagesRequest) (*GetReadPagesResponse, error)
	GetReadPagesWithDuration(context.Context, *GetReadPagesWithDurationRequest) (*GetReadPagesResponse, error)
	GetReadPagesByBookID(context.Context, *GetReadPagesByBookIDRequest) (*GetReadPagesResponse, error)
	GetBookmarkStatus(context.Context, *GetBookmarkStatusRequest) (*GetBookmarkStatusResponse, error)
	mustEmbedUnimplementedBookServer()
}

// UnimplementedBookServer must be embedded to have forward compatible implementations.
type UnimplementedBookServer struct {
}

func (UnimplementedBookServer) RegisterBook(context.Context, *RegisterBookRequest) (*RegisterBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterBook not implemented")
}
func (UnimplementedBookServer) UpdateBookmarkID(context.Context, *UpdateBookmarkIDRequest) (*UpdateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookmarkID not implemented")
}
func (UnimplementedBookServer) UpdateReadStatus(context.Context, *UpdateReadStatusRequest) (*UpdateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReadStatus not implemented")
}
func (UnimplementedBookServer) GetBooks(context.Context, *GetBooksRequest) (*GetBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedBookServer) GetReadPercentage(context.Context, *GetReadPercentageRequest) (*GetReadPercentageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadPercentage not implemented")
}
func (UnimplementedBookServer) GetReadPages(context.Context, *GetReadPagesRequest) (*GetReadPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadPages not implemented")
}
func (UnimplementedBookServer) GetReadPagesWithDuration(context.Context, *GetReadPagesWithDurationRequest) (*GetReadPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadPagesWithDuration not implemented")
}
func (UnimplementedBookServer) GetReadPagesByBookID(context.Context, *GetReadPagesByBookIDRequest) (*GetReadPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReadPagesByBookID not implemented")
}
func (UnimplementedBookServer) GetBookmarkStatus(context.Context, *GetBookmarkStatusRequest) (*GetBookmarkStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookmarkStatus not implemented")
}
func (UnimplementedBookServer) mustEmbedUnimplementedBookServer() {}

// UnsafeBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServer will
// result in compilation errors.
type UnsafeBookServer interface {
	mustEmbedUnimplementedBookServer()
}

func RegisterBookServer(s grpc.ServiceRegistrar, srv BookServer) {
	s.RegisterService(&Book_ServiceDesc, srv)
}

func _Book_RegisterBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).RegisterBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Book/RegisterBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).RegisterBook(ctx, req.(*RegisterBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_UpdateBookmarkID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookmarkIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).UpdateBookmarkID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Book/UpdateBookmarkID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).UpdateBookmarkID(ctx, req.(*UpdateBookmarkIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_UpdateReadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).UpdateReadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Book/UpdateReadStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).UpdateReadStatus(ctx, req.(*UpdateReadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Book/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetBooks(ctx, req.(*GetBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetReadPercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadPercentageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetReadPercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Book/GetReadPercentage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetReadPercentage(ctx, req.(*GetReadPercentageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetReadPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetReadPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Book/GetReadPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetReadPages(ctx, req.(*GetReadPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetReadPagesWithDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadPagesWithDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetReadPagesWithDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Book/GetReadPagesWithDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetReadPagesWithDuration(ctx, req.(*GetReadPagesWithDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetReadPagesByBookID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReadPagesByBookIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetReadPagesByBookID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Book/GetReadPagesByBookID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetReadPagesByBookID(ctx, req.(*GetReadPagesByBookIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Book_GetBookmarkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookmarkStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServer).GetBookmarkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookowl.Book/GetBookmarkStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServer).GetBookmarkStatus(ctx, req.(*GetBookmarkStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Book_ServiceDesc is the grpc.ServiceDesc for Book service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Book_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bookowl.Book",
	HandlerType: (*BookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterBook",
			Handler:    _Book_RegisterBook_Handler,
		},
		{
			MethodName: "UpdateBookmarkID",
			Handler:    _Book_UpdateBookmarkID_Handler,
		},
		{
			MethodName: "UpdateReadStatus",
			Handler:    _Book_UpdateReadStatus_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _Book_GetBooks_Handler,
		},
		{
			MethodName: "GetReadPercentage",
			Handler:    _Book_GetReadPercentage_Handler,
		},
		{
			MethodName: "GetReadPages",
			Handler:    _Book_GetReadPages_Handler,
		},
		{
			MethodName: "GetReadPagesWithDuration",
			Handler:    _Book_GetReadPagesWithDuration_Handler,
		},
		{
			MethodName: "GetReadPagesByBookID",
			Handler:    _Book_GetReadPagesByBookID_Handler,
		},
		{
			MethodName: "GetBookmarkStatus",
			Handler:    _Book_GetBookmarkStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
