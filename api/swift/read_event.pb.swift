// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: read_event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Bookowl_ReadEventRegisterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var readEventInfo: Bookowl_ReadEventInfo {
    get {return _readEventInfo ?? Bookowl_ReadEventInfo()}
    set {_readEventInfo = newValue}
  }
  /// Returns true if `readEventInfo` has been explicitly set.
  var hasReadEventInfo: Bool {return self._readEventInfo != nil}
  /// Clears the value of `readEventInfo`. Subsequent reads from it will return its default value.
  mutating func clearReadEventInfo() {self._readEventInfo = nil}

  var bookmarkID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _readEventInfo: Bookowl_ReadEventInfo? = nil
}

struct Bookowl_GetByBookIDRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bookID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bookowl_GetReadEventResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var readEventInfo: [Bookowl_ReadEventInfo] = []

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Bookowl_ReadEventRegisterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var readEventID: UInt64 = 0

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Bookowl_ReadEventInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var readStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readStartTime = newValue}
  }
  /// Returns true if `readStartTime` has been explicitly set.
  var hasReadStartTime: Bool {return self._readStartTime != nil}
  /// Clears the value of `readStartTime`. Subsequent reads from it will return its default value.
  mutating func clearReadStartTime() {self._readStartTime = nil}

  var readEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readEndTime = newValue}
  }
  /// Returns true if `readEndTime` has been explicitly set.
  var hasReadEndTime: Bool {return self._readEndTime != nil}
  /// Clears the value of `readEndTime`. Subsequent reads from it will return its default value.
  mutating func clearReadEndTime() {self._readEndTime = nil}

  var readStartWidthRevel: Int64 = 0

  var readEndWidthLevel: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _readStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _readEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bookowl"

extension Bookowl_ReadEventRegisterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReadEventRegisterRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "read_event_info"),
    2: .standard(proto: "bookmark_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._readEventInfo) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.bookmarkID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._readEventInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.bookmarkID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookmarkID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_ReadEventRegisterRequest, rhs: Bookowl_ReadEventRegisterRequest) -> Bool {
    if lhs._readEventInfo != rhs._readEventInfo {return false}
    if lhs.bookmarkID != rhs.bookmarkID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_GetByBookIDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetByBookIDRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "book_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bookID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bookID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_GetByBookIDRequest, rhs: Bookowl_GetByBookIDRequest) -> Bool {
    if lhs.bookID != rhs.bookID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_GetReadEventResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetReadEventResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "read_event_info"),
    2: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.readEventInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.readEventInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.readEventInfo, fieldNumber: 1)
    }
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_GetReadEventResponse, rhs: Bookowl_GetReadEventResponse) -> Bool {
    if lhs.readEventInfo != rhs.readEventInfo {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_ReadEventRegisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReadEventRegisterResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "read_event_id"),
    2: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.readEventID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.readEventID != 0 {
      try visitor.visitSingularUInt64Field(value: self.readEventID, fieldNumber: 1)
    }
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_ReadEventRegisterResponse, rhs: Bookowl_ReadEventRegisterResponse) -> Bool {
    if lhs.readEventID != rhs.readEventID {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_ReadEventInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReadEventInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "read_start_time"),
    2: .standard(proto: "read_end_time"),
    3: .standard(proto: "read_start_width_revel"),
    4: .standard(proto: "read_end_width_level"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._readStartTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._readEndTime) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.readStartWidthRevel) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.readEndWidthLevel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._readStartTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._readEndTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.readStartWidthRevel != 0 {
      try visitor.visitSingularInt64Field(value: self.readStartWidthRevel, fieldNumber: 3)
    }
    if self.readEndWidthLevel != 0 {
      try visitor.visitSingularInt64Field(value: self.readEndWidthLevel, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_ReadEventInfo, rhs: Bookowl_ReadEventInfo) -> Bool {
    if lhs._readStartTime != rhs._readStartTime {return false}
    if lhs._readEndTime != rhs._readEndTime {return false}
    if lhs.readStartWidthRevel != rhs.readStartWidthRevel {return false}
    if lhs.readEndWidthLevel != rhs.readEndWidthLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
