//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: book.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Bookowl_BookClient`, then call methods of this protocol to make API calls.
internal protocol Bookowl_BookClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bookowl_BookClientInterceptorFactoryProtocol? { get }

  func register(
    _ request: Bookowl_BookRegisterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_BookRegisterRequest, Bookowl_BookRegisterResponse>

  func getByUserID(
    _ request: Bookowl_GetByUserIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_GetByUserIDRequest, Bookowl_GetBookResponse>

  func getByBookmarkID(
    _ request: Bookowl_GetByBookmarkIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_GetByBookmarkIDRequest, Bookowl_GetBookResponse>

  func updateBookmarkID(
    _ request: Bookowl_UpdateBookmarkIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_UpdateBookmarkIDRequest, Bookowl_UpdateBookResponse>

  func updateReadStatus(
    _ request: Bookowl_UpdateReadStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_UpdateReadStatusRequest, Bookowl_UpdateBookResponse>
}

extension Bookowl_BookClientProtocol {
  internal var serviceName: String {
    return "bookowl.Book"
  }

  /// Registering Book using ISBN and a book width[mm].
  ///
  /// - Parameters:
  ///   - request: Request to send to Register.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func register(
    _ request: Bookowl_BookRegisterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_BookRegisterRequest, Bookowl_BookRegisterResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Book/Register",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterceptors() ?? []
    )
  }

  /// Unary call to GetByUserID
  ///
  /// - Parameters:
  ///   - request: Request to send to GetByUserID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getByUserID(
    _ request: Bookowl_GetByUserIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_GetByUserIDRequest, Bookowl_GetBookResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Book/GetByUserID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetByUserIDInterceptors() ?? []
    )
  }

  /// Unary call to GetByBookmarkID
  ///
  /// - Parameters:
  ///   - request: Request to send to GetByBookmarkID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getByBookmarkID(
    _ request: Bookowl_GetByBookmarkIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_GetByBookmarkIDRequest, Bookowl_GetBookResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Book/GetByBookmarkID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetByBookmarkIDInterceptors() ?? []
    )
  }

  /// Unary call to UpdateBookmarkID
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateBookmarkID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateBookmarkID(
    _ request: Bookowl_UpdateBookmarkIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_UpdateBookmarkIDRequest, Bookowl_UpdateBookResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Book/UpdateBookmarkID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateBookmarkIDInterceptors() ?? []
    )
  }

  /// Unary call to UpdateReadStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateReadStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateReadStatus(
    _ request: Bookowl_UpdateReadStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_UpdateReadStatusRequest, Bookowl_UpdateBookResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Book/UpdateReadStatus",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateReadStatusInterceptors() ?? []
    )
  }
}

internal protocol Bookowl_BookClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'register'.
  func makeRegisterInterceptors() -> [ClientInterceptor<Bookowl_BookRegisterRequest, Bookowl_BookRegisterResponse>]

  /// - Returns: Interceptors to use when invoking 'getByUserID'.
  func makeGetByUserIDInterceptors() -> [ClientInterceptor<Bookowl_GetByUserIDRequest, Bookowl_GetBookResponse>]

  /// - Returns: Interceptors to use when invoking 'getByBookmarkID'.
  func makeGetByBookmarkIDInterceptors() -> [ClientInterceptor<Bookowl_GetByBookmarkIDRequest, Bookowl_GetBookResponse>]

  /// - Returns: Interceptors to use when invoking 'updateBookmarkID'.
  func makeUpdateBookmarkIDInterceptors() -> [ClientInterceptor<Bookowl_UpdateBookmarkIDRequest, Bookowl_UpdateBookResponse>]

  /// - Returns: Interceptors to use when invoking 'updateReadStatus'.
  func makeUpdateReadStatusInterceptors() -> [ClientInterceptor<Bookowl_UpdateReadStatusRequest, Bookowl_UpdateBookResponse>]
}

internal final class Bookowl_BookClient: Bookowl_BookClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bookowl_BookClientInterceptorFactoryProtocol?

  /// Creates a client for the bookowl.Book service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bookowl_BookClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Bookowl_BookProvider: CallHandlerProvider {
  var interceptors: Bookowl_BookServerInterceptorFactoryProtocol? { get }

  /// Registering Book using ISBN and a book width[mm].
  func register(request: Bookowl_BookRegisterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_BookRegisterResponse>

  func getByUserID(request: Bookowl_GetByUserIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_GetBookResponse>

  func getByBookmarkID(request: Bookowl_GetByBookmarkIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_GetBookResponse>

  func updateBookmarkID(request: Bookowl_UpdateBookmarkIDRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_UpdateBookResponse>

  func updateReadStatus(request: Bookowl_UpdateReadStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_UpdateBookResponse>
}

extension Bookowl_BookProvider {
  internal var serviceName: Substring { return "bookowl.Book" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Register":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_BookRegisterRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_BookRegisterResponse>(),
        interceptors: self.interceptors?.makeRegisterInterceptors() ?? [],
        userFunction: self.register(request:context:)
      )

    case "GetByUserID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_GetByUserIDRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_GetBookResponse>(),
        interceptors: self.interceptors?.makeGetByUserIDInterceptors() ?? [],
        userFunction: self.getByUserID(request:context:)
      )

    case "GetByBookmarkID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_GetByBookmarkIDRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_GetBookResponse>(),
        interceptors: self.interceptors?.makeGetByBookmarkIDInterceptors() ?? [],
        userFunction: self.getByBookmarkID(request:context:)
      )

    case "UpdateBookmarkID":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_UpdateBookmarkIDRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_UpdateBookResponse>(),
        interceptors: self.interceptors?.makeUpdateBookmarkIDInterceptors() ?? [],
        userFunction: self.updateBookmarkID(request:context:)
      )

    case "UpdateReadStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_UpdateReadStatusRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_UpdateBookResponse>(),
        interceptors: self.interceptors?.makeUpdateReadStatusInterceptors() ?? [],
        userFunction: self.updateReadStatus(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Bookowl_BookServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'register'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterInterceptors() -> [ServerInterceptor<Bookowl_BookRegisterRequest, Bookowl_BookRegisterResponse>]

  /// - Returns: Interceptors to use when handling 'getByUserID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetByUserIDInterceptors() -> [ServerInterceptor<Bookowl_GetByUserIDRequest, Bookowl_GetBookResponse>]

  /// - Returns: Interceptors to use when handling 'getByBookmarkID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetByBookmarkIDInterceptors() -> [ServerInterceptor<Bookowl_GetByBookmarkIDRequest, Bookowl_GetBookResponse>]

  /// - Returns: Interceptors to use when handling 'updateBookmarkID'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateBookmarkIDInterceptors() -> [ServerInterceptor<Bookowl_UpdateBookmarkIDRequest, Bookowl_UpdateBookResponse>]

  /// - Returns: Interceptors to use when handling 'updateReadStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateReadStatusInterceptors() -> [ServerInterceptor<Bookowl_UpdateReadStatusRequest, Bookowl_UpdateBookResponse>]
}
