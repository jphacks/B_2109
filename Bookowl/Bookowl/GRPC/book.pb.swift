// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: book.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ReadStatus links to server/pkg/models/user_book.go ReadStatus
enum Bookowl_ReadStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case readUnread // = 0
  case readReading // = 1
  case readSuspended // = 2
  case readComplete // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .readUnread
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .readUnread
    case 1: self = .readReading
    case 2: self = .readSuspended
    case 3: self = .readComplete
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .readUnread: return 0
    case .readReading: return 1
    case .readSuspended: return 2
    case .readComplete: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bookowl_ReadStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Bookowl_ReadStatus] = [
    .readUnread,
    .readReading,
    .readSuspended,
    .readComplete,
  ]
}

#endif  // swift(>=4.2)

struct Bookowl_BookRegisterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bookInfo: Bookowl_BookInfo {
    get {return _bookInfo ?? Bookowl_BookInfo()}
    set {_bookInfo = newValue}
  }
  /// Returns true if `bookInfo` has been explicitly set.
  var hasBookInfo: Bool {return self._bookInfo != nil}
  /// Clears the value of `bookInfo`. Subsequent reads from it will return its default value.
  mutating func clearBookInfo() {self._bookInfo = nil}

  var bookmarkID: UInt64 = 0

  var userID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bookInfo: Bookowl_BookInfo? = nil
}

struct Bookowl_BookRegisterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bookID: UInt64 = 0

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Bookowl_GetByUserIDRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bookowl_GetByBookmarkIDRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bookmarkID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bookowl_GetBookResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bookInfo: [Bookowl_BookInfo] = []

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Bookowl_UpdateReadStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bookID: UInt64 = 0

  var readStatus: Bookowl_ReadStatus = .readUnread

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bookowl_UpdateBookmarkIDRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bookID: UInt64 = 0

  var bookmarkID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Bookowl_UpdateBookResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bookInfo: Bookowl_BookInfo {
    get {return _bookInfo ?? Bookowl_BookInfo()}
    set {_bookInfo = newValue}
  }
  /// Returns true if `bookInfo` has been explicitly set.
  var hasBookInfo: Bool {return self._bookInfo != nil}
  /// Clears the value of `bookInfo`. Subsequent reads from it will return its default value.
  mutating func clearBookInfo() {self._bookInfo = nil}

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bookInfo: Bookowl_BookInfo? = nil
  fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Bookowl_BookInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bookID: UInt64 = 0

  var isbn: String = String()

  var bookMiliWidth: UInt64 = 0

  var name: String = String()

  var pages: Int64 = 0

  var price: Int64 = 0

  var authors: [String] = []

  var readStatus: Bookowl_ReadStatus = .readUnread

  var categories: [String] = []

  var userID: [UInt64] = []

  var bookmarkID: [UInt64] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bookowl"

extension Bookowl_ReadStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "READ_UNREAD"),
    1: .same(proto: "READ_READING"),
    2: .same(proto: "READ_SUSPENDED"),
    3: .same(proto: "READ_COMPLETE"),
  ]
}

extension Bookowl_BookRegisterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BookRegisterRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "book_info"),
    2: .standard(proto: "bookmark_id"),
    3: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._bookInfo) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.bookmarkID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bookInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.bookmarkID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookmarkID, fieldNumber: 2)
    }
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_BookRegisterRequest, rhs: Bookowl_BookRegisterRequest) -> Bool {
    if lhs._bookInfo != rhs._bookInfo {return false}
    if lhs.bookmarkID != rhs.bookmarkID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_BookRegisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BookRegisterResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "book_id"),
    2: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bookID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.bookID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookID, fieldNumber: 1)
    }
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_BookRegisterResponse, rhs: Bookowl_BookRegisterResponse) -> Bool {
    if lhs.bookID != rhs.bookID {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_GetByUserIDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetByUserIDRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.userID != 0 {
      try visitor.visitSingularUInt64Field(value: self.userID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_GetByUserIDRequest, rhs: Bookowl_GetByUserIDRequest) -> Bool {
    if lhs.userID != rhs.userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_GetByBookmarkIDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetByBookmarkIDRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bookmark_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bookmarkID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bookmarkID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookmarkID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_GetByBookmarkIDRequest, rhs: Bookowl_GetByBookmarkIDRequest) -> Bool {
    if lhs.bookmarkID != rhs.bookmarkID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_GetBookResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetBookResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "book_info"),
    2: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.bookInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.bookInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.bookInfo, fieldNumber: 1)
    }
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_GetBookResponse, rhs: Bookowl_GetBookResponse) -> Bool {
    if lhs.bookInfo != rhs.bookInfo {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_UpdateReadStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateReadStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "book_id"),
    2: .standard(proto: "read_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bookID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.readStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bookID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookID, fieldNumber: 1)
    }
    if self.readStatus != .readUnread {
      try visitor.visitSingularEnumField(value: self.readStatus, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_UpdateReadStatusRequest, rhs: Bookowl_UpdateReadStatusRequest) -> Bool {
    if lhs.bookID != rhs.bookID {return false}
    if lhs.readStatus != rhs.readStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_UpdateBookmarkIDRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateBookmarkIDRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "book_id"),
    2: .standard(proto: "bookmark_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bookID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.bookmarkID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bookID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookID, fieldNumber: 1)
    }
    if self.bookmarkID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookmarkID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_UpdateBookmarkIDRequest, rhs: Bookowl_UpdateBookmarkIDRequest) -> Bool {
    if lhs.bookID != rhs.bookID {return false}
    if lhs.bookmarkID != rhs.bookmarkID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_UpdateBookResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateBookResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "book_info"),
    2: .same(proto: "time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._bookInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bookInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_UpdateBookResponse, rhs: Bookowl_UpdateBookResponse) -> Bool {
    if lhs._bookInfo != rhs._bookInfo {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bookowl_BookInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BookInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "book_id"),
    2: .same(proto: "isbn"),
    3: .standard(proto: "book_mili_width"),
    4: .same(proto: "name"),
    5: .same(proto: "pages"),
    6: .same(proto: "price"),
    7: .same(proto: "authors"),
    8: .standard(proto: "read_status"),
    9: .same(proto: "categories"),
    10: .standard(proto: "user_id"),
    11: .standard(proto: "bookmark_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.bookID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.isbn) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.bookMiliWidth) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.pages) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.price) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.authors) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.readStatus) }()
      case 9: try { try decoder.decodeRepeatedStringField(value: &self.categories) }()
      case 10: try { try decoder.decodeRepeatedUInt64Field(value: &self.userID) }()
      case 11: try { try decoder.decodeRepeatedUInt64Field(value: &self.bookmarkID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bookID != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookID, fieldNumber: 1)
    }
    if !self.isbn.isEmpty {
      try visitor.visitSingularStringField(value: self.isbn, fieldNumber: 2)
    }
    if self.bookMiliWidth != 0 {
      try visitor.visitSingularUInt64Field(value: self.bookMiliWidth, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    if self.pages != 0 {
      try visitor.visitSingularInt64Field(value: self.pages, fieldNumber: 5)
    }
    if self.price != 0 {
      try visitor.visitSingularInt64Field(value: self.price, fieldNumber: 6)
    }
    if !self.authors.isEmpty {
      try visitor.visitRepeatedStringField(value: self.authors, fieldNumber: 7)
    }
    if self.readStatus != .readUnread {
      try visitor.visitSingularEnumField(value: self.readStatus, fieldNumber: 8)
    }
    if !self.categories.isEmpty {
      try visitor.visitRepeatedStringField(value: self.categories, fieldNumber: 9)
    }
    if !self.userID.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.userID, fieldNumber: 10)
    }
    if !self.bookmarkID.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.bookmarkID, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Bookowl_BookInfo, rhs: Bookowl_BookInfo) -> Bool {
    if lhs.bookID != rhs.bookID {return false}
    if lhs.isbn != rhs.isbn {return false}
    if lhs.bookMiliWidth != rhs.bookMiliWidth {return false}
    if lhs.name != rhs.name {return false}
    if lhs.pages != rhs.pages {return false}
    if lhs.price != rhs.price {return false}
    if lhs.authors != rhs.authors {return false}
    if lhs.readStatus != rhs.readStatus {return false}
    if lhs.categories != rhs.categories {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.bookmarkID != rhs.bookmarkID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
