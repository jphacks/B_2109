//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: match.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Bookowl_MatchClient`, then call methods of this protocol to make API calls.
internal protocol Bookowl_MatchClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bookowl_MatchClientInterceptorFactoryProtocol? { get }

  func registerOpponents(
    _ request: Bookowl_RegisterOpponentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_RegisterOpponentsRequest, Bookowl_RegisterOpponentsResponse>

  func getOpponents(
    _ request: Bookowl_GetOpponentsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_GetOpponentsRequest, Bookowl_GetOpponentsResponse>

  func getRanking(
    _ request: Bookowl_GetRankingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_GetRankingRequest, Bookowl_GetRankingResponse>
}

extension Bookowl_MatchClientProtocol {
  internal var serviceName: String {
    return "bookowl.Match"
  }

  /// Unary call to RegisterOpponents
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterOpponents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerOpponents(
    _ request: Bookowl_RegisterOpponentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_RegisterOpponentsRequest, Bookowl_RegisterOpponentsResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Match/RegisterOpponents",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterOpponentsInterceptors() ?? []
    )
  }

  /// Unary call to GetOpponents
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOpponents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOpponents(
    _ request: Bookowl_GetOpponentsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_GetOpponentsRequest, Bookowl_GetOpponentsResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Match/GetOpponents",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOpponentsInterceptors() ?? []
    )
  }

  /// Unary call to GetRanking
  ///
  /// - Parameters:
  ///   - request: Request to send to GetRanking.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getRanking(
    _ request: Bookowl_GetRankingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_GetRankingRequest, Bookowl_GetRankingResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Match/GetRanking",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetRankingInterceptors() ?? []
    )
  }
}

internal protocol Bookowl_MatchClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerOpponents'.
  func makeRegisterOpponentsInterceptors() -> [ClientInterceptor<Bookowl_RegisterOpponentsRequest, Bookowl_RegisterOpponentsResponse>]

  /// - Returns: Interceptors to use when invoking 'getOpponents'.
  func makeGetOpponentsInterceptors() -> [ClientInterceptor<Bookowl_GetOpponentsRequest, Bookowl_GetOpponentsResponse>]

  /// - Returns: Interceptors to use when invoking 'getRanking'.
  func makeGetRankingInterceptors() -> [ClientInterceptor<Bookowl_GetRankingRequest, Bookowl_GetRankingResponse>]
}

internal final class Bookowl_MatchClient: Bookowl_MatchClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bookowl_MatchClientInterceptorFactoryProtocol?

  /// Creates a client for the bookowl.Match service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bookowl_MatchClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Bookowl_MatchProvider: CallHandlerProvider {
  var interceptors: Bookowl_MatchServerInterceptorFactoryProtocol? { get }

  func registerOpponents(request: Bookowl_RegisterOpponentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_RegisterOpponentsResponse>

  func getOpponents(request: Bookowl_GetOpponentsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_GetOpponentsResponse>

  func getRanking(request: Bookowl_GetRankingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_GetRankingResponse>
}

extension Bookowl_MatchProvider {
  internal var serviceName: Substring { return "bookowl.Match" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "RegisterOpponents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_RegisterOpponentsRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_RegisterOpponentsResponse>(),
        interceptors: self.interceptors?.makeRegisterOpponentsInterceptors() ?? [],
        userFunction: self.registerOpponents(request:context:)
      )

    case "GetOpponents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_GetOpponentsRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_GetOpponentsResponse>(),
        interceptors: self.interceptors?.makeGetOpponentsInterceptors() ?? [],
        userFunction: self.getOpponents(request:context:)
      )

    case "GetRanking":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_GetRankingRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_GetRankingResponse>(),
        interceptors: self.interceptors?.makeGetRankingInterceptors() ?? [],
        userFunction: self.getRanking(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Bookowl_MatchServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'registerOpponents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterOpponentsInterceptors() -> [ServerInterceptor<Bookowl_RegisterOpponentsRequest, Bookowl_RegisterOpponentsResponse>]

  /// - Returns: Interceptors to use when handling 'getOpponents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOpponentsInterceptors() -> [ServerInterceptor<Bookowl_GetOpponentsRequest, Bookowl_GetOpponentsResponse>]

  /// - Returns: Interceptors to use when handling 'getRanking'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetRankingInterceptors() -> [ServerInterceptor<Bookowl_GetRankingRequest, Bookowl_GetRankingResponse>]
}
