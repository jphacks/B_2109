//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: goal.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Bookowl_GoalClient`, then call methods of this protocol to make API calls.
internal protocol Bookowl_GoalClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bookowl_GoalClientInterceptorFactoryProtocol? { get }

  func createGoal(
    _ request: Bookowl_CreateGoalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_CreateGoalRequest, Bookowl_CreateGoalResponse>

  func getGoals(
    _ request: Bookowl_GetGoalsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Bookowl_GetGoalsRequest, Bookowl_GetGoalsResponse>
}

extension Bookowl_GoalClientProtocol {
  internal var serviceName: String {
    return "bookowl.Goal"
  }

  /// Unary call to CreateGoal
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGoal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGoal(
    _ request: Bookowl_CreateGoalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_CreateGoalRequest, Bookowl_CreateGoalResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Goal/CreateGoal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGoalInterceptors() ?? []
    )
  }

  /// Unary call to GetGoals
  ///
  /// - Parameters:
  ///   - request: Request to send to GetGoals.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getGoals(
    _ request: Bookowl_GetGoalsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bookowl_GetGoalsRequest, Bookowl_GetGoalsResponse> {
    return self.makeUnaryCall(
      path: "/bookowl.Goal/GetGoals",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetGoalsInterceptors() ?? []
    )
  }
}

internal protocol Bookowl_GoalClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createGoal'.
  func makeCreateGoalInterceptors() -> [ClientInterceptor<Bookowl_CreateGoalRequest, Bookowl_CreateGoalResponse>]

  /// - Returns: Interceptors to use when invoking 'getGoals'.
  func makeGetGoalsInterceptors() -> [ClientInterceptor<Bookowl_GetGoalsRequest, Bookowl_GetGoalsResponse>]
}

internal final class Bookowl_GoalClient: Bookowl_GoalClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bookowl_GoalClientInterceptorFactoryProtocol?

  /// Creates a client for the bookowl.Goal service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bookowl_GoalClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Bookowl_GoalProvider: CallHandlerProvider {
  var interceptors: Bookowl_GoalServerInterceptorFactoryProtocol? { get }

  func createGoal(request: Bookowl_CreateGoalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_CreateGoalResponse>

  func getGoals(request: Bookowl_GetGoalsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Bookowl_GetGoalsResponse>
}

extension Bookowl_GoalProvider {
  internal var serviceName: Substring { return "bookowl.Goal" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateGoal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_CreateGoalRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_CreateGoalResponse>(),
        interceptors: self.interceptors?.makeCreateGoalInterceptors() ?? [],
        userFunction: self.createGoal(request:context:)
      )

    case "GetGoals":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bookowl_GetGoalsRequest>(),
        responseSerializer: ProtobufSerializer<Bookowl_GetGoalsResponse>(),
        interceptors: self.interceptors?.makeGetGoalsInterceptors() ?? [],
        userFunction: self.getGoals(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Bookowl_GoalServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createGoal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateGoalInterceptors() -> [ServerInterceptor<Bookowl_CreateGoalRequest, Bookowl_CreateGoalResponse>]

  /// - Returns: Interceptors to use when handling 'getGoals'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetGoalsInterceptors() -> [ServerInterceptor<Bookowl_GetGoalsRequest, Bookowl_GetGoalsResponse>]
}
